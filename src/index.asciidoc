// -*- adoc -*-
// vim: set syntax=asciidoc:

= Erlog
Robert Virding et al
:Author Initials: RV
:title: Erlog, a prolog that runs in an erlang process
:description: The Erlang VM supports the prolog programming language.
:footer: Logic programming for the better good!
:brand: erlog
:doctype: article
:toc2:
:backend: bootstrap-docs
:link-assets:
:glyphicons: http://glyphicons.com[Glyphicons]

== Overview

Erlog is an implementation of ISO Prolog that can run in an Erlang
process, as such it is ideally suited for adding logical infrences to
a larger Erlang program (Including LFE and elixir programs). 

Erlog can be installed with rebar, it will not install any other
packages. 


== Erlog vs SWI Prolog

Erlog is not as full featured or robust as SWI Prolog (or other
prologs). If you want to learn prolog or do a general prolog
application we suggest using SWI Prolog. 

Erlog will excel where close interactions between Erlang and prolog
are needed, or where you can take advantage of the Erlang process
model to run lots of processes at once.

== Features

* Close Integration with Erlang programs
* Ability to call Erlang code from Prolog
* Ability to work with Records and other Erlang Data structures
* Able to unify over ETS Tables
* Send and recieve messages, but not selective recieve 

== Limitations

Erlog is a somewhat limited Prolog at the moment. It lacks the
following features. (Some are being worked on)

* Garbage Collection
* Most prolog IO functions
* Explicit Concurrency 
* Support for Erlang Maps



== Add on Packages

The base erlog package is fairly minimal. It contains the base
language and not much else. There are several packages that work with
it to build up the system

=== erlog-server

Erlog-server is a project that will take a prolog file and compile it
into an erlang module that implements a gen_server. Thus it ends up
with a _.beam_ file that contains the prolog code and exports an API
that the programmer can specify from prolog. 

Note that this is not actually a prolog compiler, it just embeds the
prolog AST into the erlang beam file. 


=== erlog-unit

Erlog unit is the start of a unit & property based testing framework
for erlog. 







== Documentation


== Roadmap


== Enhancements


== Surprises



== Copyright and License


------------
The MIT License

Copyright (C) 2013-2014 by Joseph Wayne Norton <norton@alum.mit.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
------------

[bibliography]
== Resources


// -EOF-
